<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Paint</title>
		<style>
			#container { position: relative; }
			#imageView { border: 1px solid #000; }
		</style>
	</head>
	<body>
		<div id="container">
			<canvas id="imageView" width="400" height="300">
				
			</canvas>
		</div>
		<script src="script.js"></script>
	</body>
    <label>Drawing tool:
	<select id="dtool">
   		<option value="pencil">Pencil</option>
		<option value="rect">Rectangle</option>
		
	</select>
</label>
</html>
<script>
var tool = false;
var tool_default = 'pencil';

function init () {
	// Get the tool select input
	var tool_select = document.getElementById('dtool');
	if (!tool_select) {
		alert('Error: failed to get the dtool element!');
		return;
	}
	tool_select.addEventListener('change', ev_tool_change, false);

	// Activate the default tool.
	if (tools[tool_default]) {
		tool = new tools[tool_default]();
		tool_select.value = tool_default;
	}
}

// The event handler for any changes made to the tool selector
function ev_tool_change (ev) {
	if (tools[this.value]) {
		tool = new tools[this.value]();
	}
}

// This object holds the implementation of each drawing tool
var tools = {};

// The drawing pencil.
tools.pencil = function () {
	// â€¦
};
tools.rect = function () {
	var tool = this;
	this.started = false;

	this.mousedown = function (ev) {
		tool.started = true;
		tool.x0 = ev._x;
		tool.y0 = ev._y;
	};

	this.mousemove = function (ev) {
		if (!tool.started) {
			return;
		}

		var x = Math.min(ev._x,	tool.x0),
			y = Math.min(ev._y,	tool.y0),
			w = Math.abs(ev._x - tool.x0),
			h = Math.abs(ev._y - tool.y0);

		context.clearRect(0, 0, canvas.width, canvas.height);

		if (!w || !h) {
			return;
		}

		context.strokeRect(x, y, w, h);
	};

	this.mouseup = function (ev) {
		if (tool.started) {
			tool.mousemove(ev);
			tool.started = false;
		}
	};
};
5

// The general-purpose event handler. This function just determines
// the mouse position relative to the <canvas> element
function ev_canvas (ev) {
	// Firefox
	if (ev.layerX || ev.layerX == 0) {
		ev._x = ev.layerX;
		ev._y = ev.layerY;
	// Opera
	} else if (ev.offsetX || ev.offsetX == 0) {
		ev._x = ev.offsetX;
		ev._y = ev.offsetY;
	}

	// Call the event handler of the tool
	var func = tool[ev.type];
	if (func) {
		func(ev);
	}
}
var canvas, context, canvaso, contexto;

function init () {
	// Find the canvas element
	canvaso = document.getElementById('imageView');
	if (!canvaso) {
		alert('Error: I cannot find the canvas element!');
		return;
	}

	if (!canvaso.getContext) {
		alert('Error: no canvas.getContext!');
		return;
	}

	// Get the 2D canvas context
	contexto = canvaso.getContext('2d');
	if (!contexto) {
		alert('Error: failed to getContext!');
		return;
	}

	// Add the temporary canvas
	var container = canvaso.parentNode;
	canvas = document.createElement('canvas');
	if (!canvas) {
		alert('Error: I cannot create a new <canvas> element!');
		return;
	}

function img_update () {
	contexto.drawImage(canvas, 0, 0);
	context.clearRect(0, 0, canvas.width, canvas.height);
}
tools.pencil = function () {
	this.mouseup = function (ev) {
		if (tool.started) {
			tool.mousemove(ev);
			tool.started = false;
			img_update();
		}
	};
};
</script>
<style>
	#container { position: relative; }
	#imageView { border: 1px solid #000; }
	#imageTemp { position: absolute; top: 1px; left: 1px; }
</style>
<script>

	canvas.id = 'imageTemp';
	canvas.width = canvaso.width;
	canvas.height = canvaso.height;
	container.appendChild(canvas);

	context = canvas.getContext('2d');
}

</script>
<style>
	#container { position: relative; }
	#imageView { border: 1px solid #000; }
	#imageTemp { position: absolute; top: 1px; left: 1px; }
</style>












 <label>Brush Size:
	<select id="dtool">
   		<option value="Thin">Thin</option>
		<option value="Medium">Medium</option>
        <option value="Thick">Thick</option>
		
	</select>
</label>
 <label>Brush Colour:
	<select id="dtools">
     	<option value="Black">Black</option>
   		<option value="Red">Red</option>
		<option value="Orange">Orange</option>
        <option value="Yellow">Yellow</option>
        <option value="Green">Green</option>
		<option value="Blue">Blue</option>
        <option value="Purple">Purple</option>
        <option value="Eraser">Eraser</option>
