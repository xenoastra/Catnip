<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Paint</title>
		<style>
			#container { position: relative; }
			#imageView { border: 1px solid #000; }
		</style>
	</head>
	<body>
		<div id="container">
			<canvas id="imageView" width="400" height="300">
				
			</canvas>
		</div>
		<script src="script.js"></script>
	</body>
    <label>Drawing tool:
	<select id="dtool">
   		<option value="pencil">Pencil</option>
		<option value="rect">Rectangle</option>
		
	</select>
</label>
</html>
<script>
var tool = false;
var tool_default = 'pencil';

function init () {
	// Get the tool select input
	var tool_select = document.getElementById('dtool');
	if (!tool_select) {
		alert('Error: failed to get the dtool element!');
		return;
	}
	tool_select.addEventListener('change', ev_tool_change, false);

	// Activate the default tool.
	if (tools[tool_default]) {
		tool = new tools[tool_default]();
		tool_select.value = tool_default;
	}
}

// The event handler for any changes made to the tool selector
function ev_tool_change (ev) {
	if (tools[this.value]) {
		tool = new tools[this.value]();
	}
}

// This object holds the implementation of each drawing tool
var tools = {};

// The drawing pencil.
tools.pencil = function () {
	// â€¦
};
tools.rect = function () {
	var tool = this;
	this.started = false;

	this.mousedown = function (ev) {
		tool.started = true;
		tool.x0 = ev._x;
		tool.y0 = ev._y;
	};

	this.mousemove = function (ev) {
		if (!tool.started) {
			return;
		}

		var x = Math.min(ev._x,	tool.x0),
			y = Math.min(ev._y,	tool.y0),
			w = Math.abs(ev._x - tool.x0),
			h = Math.abs(ev._y - tool.y0);

		context.clearRect(0, 0, canvas.width, canvas.height);

		if (!w || !h) {
			return;
		}

		context.strokeRect(x, y, w, h);
	};

	this.mouseup = function (ev) {
		if (tool.started) {
			tool.mousemove(ev);
			tool.started = false;
		}
	};
};
5

// The general-purpose event handler. This function just determines
// the mouse position relative to the <canvas> element
function ev_canvas (ev) {
	// Firefox
	if (ev.layerX || ev.layerX == 0) {
		ev._x = ev.layerX;
		ev._y = ev.layerY;
	// Opera
	} else if (ev.offsetX || ev.offsetX == 0) {
		ev._x = ev.offsetX;
		ev._y = ev.offsetY;
	}

	// Call the event handler of the tool
	var func = tool[ev.type];
	if (func) {
		func(ev);
	}
}
<!DOCTYPE html>
<html>

  <head>
      <meta charset="utf-8">
      <title>
          Draw your own cat!
      </title>
      <meta name="viewport" content="width=device-width, initial-scale=1">
  </head>
<div id="sketch">
  <canvas id="paint"></canvas>
</div>

<div id="settings"> Colour:
  <button onclick="getColor('black');">Black</button>
  <button onclick="getColor('red');">Red</button>
  <button onclick="getColor('orange');">Orange</button>
  <button onclick="getColor('yellow');">Yellow</button>
  <button onclick="getColor('green');">Green</button>
  <button onclick="getColor('blue');">Blue</button>
  <button onclick="getColor('purple');">Purple</button>
  <button onclick="getColor('white');">Eraser</button>
  
</div>

<div id="settings"> Brush Size:
  <button onclick="getSize('2');">Thin</button>
  <button onclick="getSize('5');">Medium</button>
  <button onclick="getSize('10');">Thick</button>
  <button onclick="getSize('20');">Wide</button>
</div>
<p> Or add the hex of your own colour! </p>
  <input id="hex" placeholder="#hex"></input>
  <canvas id="draw"></canvas>


<body>
		<div id="container">
			<canvas id="imageView" width="400" height="300">
				
			</canvas>
		</div>
		<script src="script.js"></script>
	</body>
   
  </html>
  
  <script>
  var canvas = document.getElementById('paint');
var ctx = canvas.getContext('2d');
 

  function getColor(colour){ctx.strokeStyle = colour;}

function getSize(size){ctx.lineWidth = size;}
  

// The event handler for any changes made to the tool selector

 var canvas = document.getElementById("draw");

var ctx = canvas.getContext("2d");
resize();

var canvas = document.getElementById('paint');
var ctx = canvas.getContext('2d');
 
var sketch = document.getElementById('sketch');
var sketch_style = getComputedStyle(sketch);
canvas.width = 600;
canvas.height = 550;
// resize canvas when window is resized
function resize() {
 ctx.canvas.width = window.innerWidth;
  ctx.canvas.height = window.innerHeight;
}

// initialize position as 0,0
var pos = { x: 0, y: 0 };

// new position from mouse events
function setPosition(e) {
  pos.x = e.clientX;
  pos.y = e.clientY;
}

function draw(e) {
  if (e.buttons !== 1) return; // if mouse is not clicked, do not go further

  var color = document.getElementById("hex").value;

  ctx.beginPath(); // begin the drawing path

  // width of line
  ctx.lineCap = "round"; // rounded end cap
  ctx.strokeStyle = color; // hex color of line

  ctx.moveTo(pos.x, pos.y); // from position
  setPosition(e);
  ctx.lineTo(pos.x, pos.y); // to position

  ctx.stroke(); // draw it!
}


// add window event listener to trigger when window is resized
window.addEventListener("resize", resize);

// add event listeners to trigger on different mouse events
document.addEventListener("mousemove", draw);
document.addEventListener("mousedown", setPosition);
document.addEventListener("mouseenter", setPosition);
</script>
<style>
*{font-family:sans-serif;}

#settings { display: block; text-align:center}


#paint {border: 1px solid black; background : #fffff; margin-left: auto; margin-right: auto; display: block;}
</style>